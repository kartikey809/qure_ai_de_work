dicom_db : schema

+----------------+        +----------------+        +----------------+       +--------------------+
|    Patient     |        |      Study     |        |     Series     |       |   SliceMetadata    |
+----------------+        +----------------+        +----------------+       +--------------------+
| PatientID (PK) |<----   | StudyInstanceUID (PK)   | SeriesInstanceUID (PK)  | SliceID (PK, AI)    |
| PatientName    |        | PatientID (FK)          | StudyInstanceUID (FK)   | SeriesInstanceUID (FK) |
| PatientSex     |        | StudyDescription        | SeriesDescription       | AcquisitionDate     |
| PatientAge     |        | StudyDate               | Modality                | AcquisitionTime     |
| PatientBirthDate|       | StudyTime               | SliceThickness          | ContrastBolusAgent  |
| PatientIdentityRemoved  | StudyID                 | PixelSpacing            | AccessionNumber      |
| DeIdentificationMethod  | SeriesDate              | ImagePositionPatient    | SliceNumber          |
| LastMenstrualDate|      | ReferringPhysicianName  | ImageOrientationPatient | SliceLocation       |
+----------------+        +----------------+        +----------------+     +--------------------+
                          |                        |                       |
                                                   |                       |
                         +-------------------+----------------------------+
                         |                             |
                         FOREIGN KEY (PatientID)       FOREIGN KEY (StudyInstanceUID)
                         (Patient)                     (Study)

CREATE TABLE IF NOT EXISTS Patient (
    PatientID TEXT PRIMARY KEY,
    PatientName TEXT,
    PatientSex TEXT,
    PatientAge TEXT,
    PatientBirthDate TEXT,
    PatientIdentityRemoved TEXT,
    DeIdentificationMethod TEXT,
    LastMenstrualDate TEXT
);
__________________________________________________________________________________________________________________________________________________________
CREATE TABLE IF NOT EXISTS Study (
    StudyInstanceUID TEXT PRIMARY KEY,
    PatientID TEXT,
    StudyDescription TEXT,
    StudyDate TEXT,
    StudyTime TEXT,
    StudyID TEXT,
    SeriesDate TEXT,
    ReferringPhysicianName TEXT,
    FOREIGN KEY (PatientID) REFERENCES Patient (PatientID)
);
__________________________________________________________________________________________________________________________________________________________
CREATE TABLE IF NOT EXISTS Series (
    SeriesInstanceUID TEXT PRIMARY KEY,
    StudyInstanceUID TEXT,
    SeriesDescription TEXT,
    Modality TEXT,
    SliceThickness TEXT,
    PixelSpacing TEXT,
    ImagePositionPatient TEXT,
    ImageOrientationPatient TEXT,
    Rows INTEGER,
    Columns INTEGER,
    ImageType TEXT,
    AcquisitionNumber TEXT,
    InstanceNumber TEXT,
    PatientPosition TEXT,
    ExposureTime INTEGER,
    KVP REAL,
    TableHeight REAL,
    SliceLocation REAL,
    BodyPartExamined TEXT,
    ScanOptions TEXT,
    ReconstructionDiameter REAL,
    DistanceSourceToPatient REAL,
    GantryDetectorTilt REAL,
    RotationDirection TEXT,
    ConvolutionKernel TEXT,
    FOREIGN KEY (StudyInstanceUID) REFERENCES Study (StudyInstanceUID)
);
__________________________________________________________________________________________________________________________________________________________
CREATE TABLE IF NOT EXISTS SliceMetadata (
    SliceID INTEGER PRIMARY KEY AUTOINCREMENT,
    SeriesInstanceUID TEXT,
    AcquisitionDate TEXT,
    AcquisitionTime TEXT,
    ContrastBolusAgent TEXT,
    AccessionNumber TEXT,
    SliceNumber INTEGER,
    SliceLocation REAL,
    SliceThickness REAL,
    PixelPaddingValue INTEGER,
    RescaleIntercept REAL,
    RescaleSlope REAL,
    LongitudinalTemporalInfo TEXT,
    FOREIGN KEY (SeriesInstanceUID) REFERENCES Series (SeriesInstanceUID)
);
_____________________________________________________________________________________________________________________________________________________________


*SCALABILITY* - 

To scale the process in production environment where we need to handle large datasets , WE SHOULD BE LEVERAGING- 

1.Parallel processing of datasets - To acheive this worker nodes will handle chunks of datastes to process across multiple nodes which will ensure memory and CPU resource utilization .
2. Locally we could use multithreading / multiprocessing approach to handle database insertions according to scanerios, which will reduce sequential batch processing time.
3. Use of Cloud services - To check for errors : AWS CloudWatch,Azure Monitor allow you to track logs and metrics for issues such as failed DICOM metadata extraction or slow processing times. For example, CloudWatch will be able to give alerts when the DICOM processing time exceeds a certain threshold, to identify bottlenecks.It also provides fetaures like auto-scaling and load balancing. When processing a large batch of DICOM images, if the load spikes, auto-scaling will automatically add more resources, ensuring no task is left incomplete and resources are utilized if available. Similarly, load balancing can distribute requests across multiple instances, ensuring continuous availability of DICOM services even if one instance fails. Cloud platforms also offer data replication across regions, ensuring that DICOM data is accessible and protected from data loss or service downtime.
